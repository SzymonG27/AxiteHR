// <auto-generated />
using System;
using AxiteHr.Services.CompanyAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AxiteHr.Services.CompanyAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyLevelId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxNumberOfWorkers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyLevels");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyPermission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyPermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionName = "Creator"
                        },
                        new
                        {
                            Id = 2,
                            PermissionName = "Authorized to manage"
                        },
                        new
                        {
                            Id = 3,
                            PermissionName = "Employee"
                        });
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsMain = true,
                            RoleName = "Software department"
                        });
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyUserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyPermissionId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyPermissionId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("CompanyUserPermissions");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyRoleId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InsUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRoleId");

                    b.HasIndex("CompanyUserId");

                    b.ToTable("CompanyUserRoles");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.Company", b =>
                {
                    b.HasOne("AxiteHr.Services.CompanyAPI.Models.CompanyLevel", "CompanyLevel")
                        .WithMany()
                        .HasForeignKey("CompanyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyLevel");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyUser", b =>
                {
                    b.HasOne("AxiteHr.Services.CompanyAPI.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyUserPermission", b =>
                {
                    b.HasOne("AxiteHr.Services.CompanyAPI.Models.CompanyPermission", "CompanyPermission")
                        .WithMany()
                        .HasForeignKey("CompanyPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxiteHr.Services.CompanyAPI.Models.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyPermission");

                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("AxiteHr.Services.CompanyAPI.Models.CompanyUserRole", b =>
                {
                    b.HasOne("AxiteHr.Services.CompanyAPI.Models.CompanyRole", "CompanyRole")
                        .WithMany()
                        .HasForeignKey("CompanyRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AxiteHr.Services.CompanyAPI.Models.CompanyUser", "CompanyUser")
                        .WithMany()
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyRole");

                    b.Navigation("CompanyUser");
                });
#pragma warning restore 612, 618
        }
    }
}
